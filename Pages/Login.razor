@page "/login"
@namespace LoginComponent
@using Managing_Adults.Authentication

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<AuthorizeView>
    <NotAuthorized>
        <div class="LogInParentDiv">
            <div class="form-group">
                <input type="text" placeholder="User name" @bind-value="username"/>
            </div>
            <div class="form-group">
                <input class="password" type="password" placeholder="Password" @bind-value="password"/>
            </div>
            <div style="color:red">@errorMessage</div>
            <center>
                <button ref="" @onclick="PerformLogin">Login </button>
            </center>  
        </div>
        
    </NotAuthorized>
    <Authorized>
        <a href="" @onclick="PerformLogout">
            Log out
        </a>
    </Authorized>
</AuthorizeView>



@code {
    private string username;
    private string password;
    private string errorMessage;

    public async Task PerformLogin() {
        errorMessage = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).ValidateLogin(username, password);
            username = "";
            password = "";
            NavigationManager.NavigateTo("/Adults");
        } catch (Exception e) {
            errorMessage = e.Message;
        }
    }

    public async Task PerformLogout() {
        errorMessage = "";
        username = "";
        password = "";
        try {
            ((CustomAuthenticationStateProvider) AuthenticationStateProvider).Logout();
            NavigationManager.NavigateTo("/");
        } catch (Exception e) { }
    }

}