@page "/Adults"
@using Managing_Adults.Data
@using Managing_Adults.Models
@using global::Models
@inject IAdultService AdultsService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<h1 >Over here is adult list</h1>
<div class="row">
    <p class="space-left">
            Search by LastName: <input type="text" @oninput="@((arg) => FilterByLastName(arg))" style="width:50px"/>
        </p>
    <p class="space-left">
        Search by Id: <input type="number" @oninput="@((arg) => FilterById(arg))" style="width:50px"/>
    </p>
    <p class=" row space">
        Search by hair color:
        <select class="form-control selectpicker" @onchange="@((arg) => FilterByHairColor(arg))" style="width:100px">
            <option selected="true" disabled="disabled">Select...</option>
            <option >Blond</option>
            <option >Red</option>
            <option >Brown</option>
            <option >Black</option>
            <option >White</option>
            <option >Grey</option>
            <option >Blue</option>
            <option >Green</option>
        </select>
    </p>

</div>

@if (adultsToShow == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsToShow.Any())
{
    <p>
        <em>No Adult items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>FirstName</th>
            <th>LastName</th>
            <th>JobTitle</th>
            <th>HairColor</th>
            <th>EyeColor</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <AuthorizeView Policy="MustBeAdmin">
                <th>Edit</th>
                <th>Delete</th>
            </AuthorizeView>

        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.JobTitle</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>

                <AuthorizeView Policy="MustBeAdmin">
                    <td>

                        <button @onclick="@(() => EditAdult(item.Id))">
                           <i class="oi oi-pencil"/>
                        </button>

                    </td>
                    <td>

                        <button @onclick="@(() => RemoveAdult(item.Id))">
                            <i class="oi oi-delete"/>
                        </button>

                    </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private IList<Adult> adultsToShow;
    private IList<Adult> allAdults;

    private int? filterById;
    private string? filterByHairColor;
    private string? filterByLastName;
    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void FilterByLastName(ChangeEventArgs changeEventArgs)
    {
        filterByLastName = null;
        try
        {
            filterByLastName = changeEventArgs.Value.ToString();
            
        }
        catch (Exception e)
        {
            
        }
        ExecuteFilter();
    }
    private void FilterByHairColor(ChangeEventArgs changeEventArgs)
    {
        filterByHairColor = null;
        try
        {
            filterByHairColor = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsToShow = allAdults.Where(t =>
            (filterById != null && t.Id == filterById || filterById == null) &&
            (filterByHairColor != null && String.Equals(filterByHairColor, t.HairColor, StringComparison.OrdinalIgnoreCase) || filterByHairColor == null ) &&
            (filterByLastName != null && String.Equals(filterByLastName, t.LastName,StringComparison.OrdinalIgnoreCase) || filterByLastName == null)
            ).ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        allAdults = await AdultsService.GetAdultAsync();
        adultsToShow = allAdults;
    }

    private void RemoveAdult(int adultId)
    {
        Adult adultToRemove = adultsToShow.First(t => t.Id == adultId);
        AdultsService.RemoveAdultAsync(adultId);
        adultsToShow.Remove(adultToRemove);
    }

    private void EditAdult(int value)
    {
        string result;
        result = value.ToString();
        NavigationManager.NavigateTo($"/EditAdult/{result}");
    }

}